// Generated by CoffeeScript 1.8.0
var PancakeApp,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

$(document).ready(function() {
  var pancakeApp;
  pancakeApp = new PancakeApp();
  $(document).on("touchmove", function(evt) {
    return evt.preventDefault();
  });
  $(document).on("touchmove", ".scrollable", function(evt) {
    return evt.stopPropagation();
  });
  pancakeApp.go();
});

PancakeApp = (function() {
  function PancakeApp() {
    this.sendChunkToBot = __bind(this.sendChunkToBot, this);
    this.panSize = {
      width: 838,
      height: 667
    };
    $("body").prepend("<div id=\"sqWrapper\">\n</div>\n<div id=\"debug1\"></div>");
    $(window).on('orientationchange', (function(_this) {
      return function() {
        return _this.redisplay();
      };
    })(this));
    $(window).on('resize', (function(_this) {
      return function() {
        return _this.redisplay();
      };
    })(this));
    return;
  }

  PancakeApp.prototype.calcLayout = function() {
    var buttonsBoxHeight, buttonsBoxWidth, buttonsBoxX, buttonsBoxY, buttonsMarginY, isVertical, panMarginX, panMarginY, winHeight, winWidth;
    panMarginX = 20;
    panMarginY = 30;
    winWidth = window.innerWidth;
    winHeight = window.innerHeight;
    this.backdropBitmapRect = {
      x: 0,
      y: 0,
      width: winWidth,
      height: winHeight
    };
    this.isPortrait = winWidth < winHeight;
    if (this.isPortrait) {
      this.panWidth = winWidth - 2 * panMarginX;
      this.panHeight = this.panWidth * this.panSize.width / this.panSize.height;
      if (this.panHeight > winHeight - 2 * panMarginY) {
        this.panHeight = winHeight - 2 * panMarginY;
        this.panWidth = this.panHeight * this.panSize.height / this.panSize.width;
      }
    } else {
      this.panWidth = winWidth - 2 * panMarginX;
      this.panHeight = this.panWidth * this.panSize.height / this.panSize.width;
      if (this.panHeight > winHeight - 2 * panMarginY) {
        this.panHeight = winHeight - 2 * panMarginY;
        this.panWidth = this.panHeight * this.panSize.width / this.panSize.height;
      }
    }
    this.panX = panMarginX;
    this.panY = panMarginY;
    this.panBitmapRect = {
      x: this.panX,
      y: this.panY,
      width: this.panWidth,
      height: this.panHeight,
      portrait: this.isPortrait
    };
    this.pancakeSketchRect = {
      x: this.panX,
      y: this.panY,
      width: this.isPortrait ? this.panWidth : this.panHeight,
      height: this.isPortrait ? this.panWidth : this.panHeight
    };
    if (this.isPortrait) {
      buttonsBoxX = panMarginX + this.panWidth / 4;
      buttonsBoxY = panMarginY * 3 + this.panWidth;
      buttonsBoxWidth = 250;
      buttonsBoxHeight = winHeight - this.panY;
      isVertical = false;
    } else {
      buttonsMarginY = panMarginY + this.panHeight / 5;
      buttonsBoxX = this.panX + this.panWidth * 0.83;
      buttonsBoxY = this.panY + buttonsMarginY;
      buttonsBoxWidth = winWidth - buttonsBoxX;
      buttonsBoxHeight = winHeight - buttonsBoxY;
      isVertical = true;
    }
    this.buttonsRect = {
      x: buttonsBoxX,
      y: buttonsBoxY,
      width: buttonsBoxWidth,
      height: buttonsBoxHeight,
      vertical: isVertical
    };
  };

  PancakeApp.prototype.go = function() {
    this.calcLayout();
    this.panDisplay = new PanDisplay("#sqWrapper", "http://robdobson.com/pancakebot/", this.backdropBitmapRect, this.panBitmapRect, this.pancakeSketchRect, this.buttonsRect);
    $('#printbtn').on("click", (function(_this) {
      return function() {
        var pancakeData, pancakeDataJson;
        pancakeData = {
          panBounds: _this.panDisplay.getPanBoundary(),
          strokes: _this.panDisplay.getStrokes()
        };
        pancakeDataJson = JSON.stringify(pancakeData);
        _this.sendChunkToBot(pancakeDataJson, true);
      };
    })(this));
  };

  PancakeApp.prototype.redisplay = function() {
    this.calcLayout();
    this.panDisplay.reposition(this.backdropBitmapRect, this.panBitmapRect, this.pancakeSketchRect, this.buttonsRect);
  };

  PancakeApp.prototype.sendChunkToBot = function(strokeRemainder, firstChunk) {
    var MAX_CONTENT_POST_MSG, urlToUse;
    MAX_CONTENT_POST_MSG = 500;
    if (firstChunk) {
      if (strokeRemainder.length <= MAX_CONTENT_POST_MSG) {
        urlToUse = "printinitgo";
      } else {
        urlToUse = "printinit";
      }
    } else {
      if (strokeRemainder.length > MAX_CONTENT_POST_MSG) {
        urlToUse = "printpart";
      } else {
        urlToUse = "printgo";
      }
    }
    if (strokeRemainder.length === 0) {
      this.postStrokesCompleted();
    } else {
      console.log("Sending " + urlToUse + " " + strokeRemainder.slice(0, MAX_CONTENT_POST_MSG).length);
      $.ajax({
        type: "POST",
        url: urlToUse,
        contentType: 'text/plain',
        data: strokeRemainder.slice(0, MAX_CONTENT_POST_MSG),
        success: (function(_this) {
          return function() {
            var remainder;
            remainder = strokeRemainder.slice(MAX_CONTENT_POST_MSG);
            _this.sendChunkToBot(remainder, false);
          };
        })(this)
      });
    }
  };

  PancakeApp.prototype.postStrokesCompleted = function() {
    console.log("completed POST");
  };

  return PancakeApp;

})();
