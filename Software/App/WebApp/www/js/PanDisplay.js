// Generated by CoffeeScript 1.7.1
var PanDisplay,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

PanDisplay = (function() {
  function PanDisplay(parentSelector, panBitmapRect, pancakeSketchRect, buttonsRect, logoRect) {
    this.parentSelector = parentSelector;
    this.sketchChanged = __bind(this.sketchChanged, this);
    $(this.parentSelector).append("<div id=\"logobox\" style=\"position:absolute;\">\n	<img src=\"http://robdobson.com/pancakebot/img/panlogo.png\" style=\"width:100%;height:auto\">\n	</img>\n</div>\n<div id=\"PanDisplay\" style=\"position:absolute;z-index:-10\">\n	<img src=\"http://robdobson.com/pancakebot/img/pan.png\">\n	</img>\n</div>\n<div id=\"pancakePath\" style=\"position:absolute;\"></div>");
    this.sketchpad = Raphael.sketchpad("pancakePath", {
      width: 100,
      height: 100,
      editing: true
    });
    this.sketchpad.pen().color("#ecebd3");
    this.sketchpad.change(this.sketchChanged);
    this.reposition(panBitmapRect, pancakeSketchRect, buttonsRect, logoRect);
    return;
  }

  PanDisplay.prototype.getStrokes = function() {
    var pathsOnly, stroke, strokeJson, strokes;
    strokeJson = this.sketchpad.json();
    strokes = JSON.parse(strokeJson);
    pathsOnly = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = strokes.length; _i < _len; _i++) {
        stroke = strokes[_i];
        _results.push(stroke.path);
      }
      return _results;
    })();
    return pathsOnly;
  };

  PanDisplay.prototype.getPanBoundary = function() {
    var panBounds;
    panBounds = {
      x: this.panCentreX,
      y: this.panCentreY,
      radius: this.panBoundaryRadius
    };
    return panBounds;
  };

  PanDisplay.prototype.reposition = function(panBitmapRect, pancakeSketchRect, buttonsRect, logoRect) {
    var height, panBorder, pancakeBorder, width;
    this.panBitmapRect = panBitmapRect;
    this.pancakeSketchRect = pancakeSketchRect;
    this.buttonsRect = buttonsRect;
    this.logoRect = logoRect;
    panBorder = this.panBitmapRect.height / 70;
    height = this.panBitmapRect.height;
    width = this.panBitmapRect.width;
    $("#PanDisplay").css("left", this.panBitmapRect.x + "px");
    $("#PanDisplay").css("top", this.panBitmapRect.y + "px");
    $("#PanDisplay img").height(height);
    $("#PanDisplay img").width(width);
    $("#pancakePath").css("left", this.pancakeSketchRect.x + "px");
    $("#pancakePath").css("top", this.pancakeSketchRect.y + "px");
    this.sketchpad.paper().setSize(this.pancakeSketchRect.width, this.pancakeSketchRect.height);
    pancakeBorder = this.pancakeSketchRect.height / 12;
    this.panBoundaryRadius = this.pancakeSketchRect.height / 2 - pancakeBorder;
    this.panCentreX = this.pancakeSketchRect.width / 2;
    this.panCentreY = this.pancakeSketchRect.height / 2;
    this.sketchpad.setCircularBounds(this.panCentreX, this.panCentreY, this.panBoundaryRadius);
    $("#logobox").css("left", this.logoRect.x);
    $("#logobox").css("top", this.logoRect.y);
    $("#logobox").css("width", this.logoRect.width);
    $("#logobox").css("height", this.logoRect.height);
    $("#buttonbox").css("left", this.buttonsRect.x);
    $("#buttonbox").css("top", this.buttonsRect.y);
  };

  PanDisplay.prototype.sketchChanged = function() {};

  return PanDisplay;

})();
