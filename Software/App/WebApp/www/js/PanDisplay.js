// Generated by CoffeeScript 1.7.1
var PanDisplay,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

PanDisplay = (function() {
  function PanDisplay(parentSelector, panBitmapRect, pancakeSketchRect, buttonsRect, logoRect) {
    this.parentSelector = parentSelector;
    this.sketchChanged = __bind(this.sketchChanged, this);
    $(this.parentSelector).append("<div id=\"logobox\" style=\"position:absolute;\">\n	<img src=\"http://robdobson.com/pancakebot/img/panlogo.png\" style=\"width:100%;height:auto\">\n	</img>\n</div>\n<div id=\"PanDisplay\" style=\"position:absolute;z-index:-10\">\n	<img src=\"http://robdobson.com/pancakebot/img/pan.png\">\n	</img>\n</div>\n<div id=\"pancakePath\" style=\"position:absolute;\"></div>");
    this.sketchpad = Raphael.sketchpad("pancakePath", {
      width: 100,
      height: 100,
      editing: true
    });
    this.sketchpad.pen().color("#ecebd3");
    this.sketchpad.change(this.sketchChanged);
    this.reposition(panBitmapRect, pancakeSketchRect, buttonsRect, logoRect);
    return;
  }

  PanDisplay.prototype.getPath = function() {
    if (this.sketchpad.strokes().length > 0) {
      return this.sketchpad.strokes()[0].path;
    }
    return null;
  };

  PanDisplay.prototype.setupPathEditor = function() {};

  PanDisplay.prototype.reposition = function(panBitmapRect, pancakeSketchRect, buttonsRect, logoRect) {
    var circleRadius, height, panBorder, pancakeBorder, width;
    this.panBitmapRect = panBitmapRect;
    this.pancakeSketchRect = pancakeSketchRect;
    this.buttonsRect = buttonsRect;
    this.logoRect = logoRect;
    panBorder = this.panBitmapRect.height / 70;
    height = this.panBitmapRect.height;
    width = this.panBitmapRect.width;
    $("#PanDisplay").css("left", this.panBitmapRect.x + "px");
    $("#PanDisplay").css("top", this.panBitmapRect.y + "px");
    $("#PanDisplay img").height(height);
    $("#PanDisplay img").width(width);
    $("#pancakePath").css("left", this.pancakeSketchRect.x + "px");
    $("#pancakePath").css("top", this.pancakeSketchRect.y + "px");
    this.sketchpad.paper().setSize(this.pancakeSketchRect.width, this.pancakeSketchRect.height);
    pancakeBorder = this.pancakeSketchRect.height / 12;
    circleRadius = this.pancakeSketchRect.height / 2 - pancakeBorder;
    this.sketchpad.setCircularBounds(this.pancakeSketchRect.width / 2, this.pancakeSketchRect.height / 2, circleRadius);
    $("#logobox").css("left", this.logoRect.x);
    $("#logobox").css("top", this.logoRect.y);
    $("#logobox").css("width", this.logoRect.width);
    $("#logobox").css("height", this.logoRect.height);
    $("#buttonbox").css("left", this.buttonsRect.x);
    $("#buttonbox").css("top", this.buttonsRect.y);
  };

  PanDisplay.prototype.sketchChanged = function() {
    var path, res, sss, sss1, sss2, sss3, stroke, testpath, _i, _len, _ref;
    sss3 = "";
    _ref = this.sketchpad.strokes();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      stroke = _ref[_i];
      sss = JSON.stringify(stroke);
      path = stroke.path[0];
      sss1 = JSON.stringify(path);
      testpath = "M10 10L900 900";
      res = Raphael.pathIntersection(stroke.path, testpath);
      sss2 = JSON.stringify(res);
      sss3 += sss2 + "\n";
    }
    $("#debug1").html(sss3);
  };

  return PanDisplay;

})();
